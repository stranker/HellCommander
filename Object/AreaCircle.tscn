[gd_scene load_steps=6 format=2]

[ext_resource path="res://Sprites/InnerCircle.png" type="Texture" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends Area2D

export var max_circle_level : int = 5
export var circle_level : int = 0
export var circle_damage : float = 0.5
export var circle_radius : float = 300
onready var circle = $CollisionShape2D.shape as CircleShape2D
var players_out = []

func _ready():
	if get_tree().is_network_server():
		$ReduceTimer.start()
	$DamageTimer.start()
	circle.radius = circle_radius
	$OuterCircle.scale = circle_radius * $OuterCircle.scale / 500
	pass

func _on_Timer_timeout():
	if circle_level < max_circle_level:
		rpc('new_inner_circle')
	else:
		$ReduceTimer.stop()
	pass # Replace with function body.

master func new_inner_circle():
	circle_level += 1
	var new_pos = Vector2()
	var offset = circle_radius - 2 * circle_radius / 1.5 + circle_radius / 1.5
	new_pos.x = $CollisionShape2D.position.x + rand_range(-offset,offset)
	new_pos.y = $CollisionShape2D.position.y + rand_range(-offset,offset)
	rpc('reduce_circle',new_pos)
	pass

sync func reduce_circle(pos):
	circle_radius /= 1.5
	$Tween.stop_all()
	$Tween.interpolate_property(circle,'radius',circle.radius, circle_radius,4,Tween.TRANS_LINEAR,Tween.EASE_IN_OUT)
	$Tween.interpolate_property($OuterCircle,'scale',$OuterCircle.scale, $OuterCircle.scale/1.5,4,Tween.TRANS_LINEAR,Tween.EASE_IN_OUT)
	$Tween.interpolate_property($OuterCircle, 'position', $OuterCircle.position, pos, 4,Tween.TRANS_LINEAR,Tween.EASE_IN)
	$Tween.interpolate_property($CollisionShape2D, 'position', $CollisionShape2D.position, pos, 4,Tween.TRANS_LINEAR,Tween.EASE_IN)
	$Tween.start()
	pass

func _on_DamageTimer_timeout():
	rpc('damage_tanks')
	pass # Replace with function body.

sync func damage_tanks():
	for player in players_out:
		player.take_circle_damage(circle_damage)
	$DamageTimer.start()
	pass

sync func register_player(player):
	players_out.erase(player)
	pass

sync func unregister_player(player):
	if is_player_outside(player):
		players_out.append(player)
	pass

func is_player_outside(p):
	return p.global_position.distance_to(global_position) > circle_radius"

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

// Gonkee's fog shader for Godot 3 - full tutorial https://youtu.be/QEaTsz_0o44
// If you use this shader, I would prefer it if you gave credit to me and my channel

uniform vec3 color = vec3(1, 0.4, 0.2);
uniform int OCTAVES = 4;

float rand(vec2 coord){
	return fract(sin(dot(coord, vec2(56, 78)) * 100.0) * 800.0);
}

float noise(vec2 coord){
	vec2 i = floor(coord);
	vec2 f = fract(coord);

	// 4 corners of a rectangle surrounding our point
	float a = rand(i);
	float b = rand(i + vec2(1.0, 0.0));
	float c = rand(i + vec2(0.0, 1.0));
	float d = rand(i + vec2(1.0, 1.0));

	vec2 cubic = f * f * (3.0 - 2.0 * f);

	return mix(a, b, cubic.x) + (c - a) * cubic.y * (1.0 - cubic.x) + (d - b) * cubic.x * cubic.y;
}

float fbm(vec2 coord){
	float value = 0.0;
	float scale = 0.5;

	for(int i = 0; i < OCTAVES; i++){
		value += noise(coord) * scale;
		coord *= 2.0;
		scale *= 0.5;
	}
	return value;
}

void fragment() {
	vec2 coord = UV * 20.0;

	vec2 motion = vec2( fbm(coord + vec2(TIME * -0.2, TIME * 1.5)) );

	float final = fbm(coord + motion);

	COLOR = vec4(color, final * 0.5);
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/color = Vector3( 1, 0.4, 0.2 )
shader_param/OCTAVES = 4

[sub_resource type="CircleShape2D" id=2]
radius = 500.0

[node name="AreaCircle" type="Area2D"]
script = SubResource( 1 )

[node name="OuterCircle" type="Sprite" parent="."]
material = SubResource( 4 )
scale = Vector2( 2, 2 )
texture = ExtResource( 1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
visible = false
shape = SubResource( 2 )

[node name="ReduceTimer" type="Timer" parent="."]
wait_time = 5.0

[node name="DamageTimer" type="Timer" parent="."]

[node name="Tween" type="Tween" parent="."]

[connection signal="timeout" from="ReduceTimer" to="." method="_on_Timer_timeout"]
[connection signal="timeout" from="DamageTimer" to="." method="_on_DamageTimer_timeout"]
